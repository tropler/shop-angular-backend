service: product-service

plugins:
  - serverless-functions-base-path
  - serverless-webpack

frameworkVersion: '3.29'

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-west-1
  apiName: products-api
  httpApi:
    cors: true
    authorizers:
      httpApiRequestAuthorizer:
        name: 'httpApiRequestAuthorizer'
        functionArn: arn:aws:lambda:eu-west-1:817322011680:function:authorization-service-dev-BasicAuthorizer
        type: 'request'
        enableSimpleResponses: true
        payloadVersion: '2.0'
        identitySource:
          - $request.header.Authorization
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sqs:*
      Resource:
        Fn::GetAtt: [catalogQueue, Arn]
    - Effect: Allow
      Action:
        - sns:Publish
      Resource:
        Ref: createProductTopic
    - Effect: Allow
      Action:
        - lambda:invokeFunction
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - '${self:custom.arnTablePath}/products'
        - '${self:custom.arnTablePath}/stocks'

resources:
  Resources:
    catalogQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: catalogQueue

    createProductTopic:
      Type: 'AWS::SNS::Topic'
      Properties:
        TopicName: createProductTopic

    emailSubscription:
      Type: 'AWS::SNS::Subscription'
      Properties:
        Endpoint: texet1711@gmail.com
        Protocol: email
        TopicArn: {'Ref': 'createProductTopic'}

custom:
  functionsBasePath: src/handlers
  arnTablePath: arn:aws:dynamodb:eu-west-1:817322011680:table
  webpack:
    webpackConfig: "./webpack.config.js"
    includeModules: true
    keepOutputDirectory: true
  documentation:
    version: '1'
    title: 'Product Service APO'
    description: 'This is Product Service API'
    models: {}

functions:
  getProductsList:
    handler: getProductsList/handler.getProductsList
    events:
      - httpApi:
          cors: true
          path: /products
          method: get
          authorizer:
            name: httpApiRequestAuthorizer
  getProductById:
    handler: getProductsById/handler.getProductsById
    events:
      - httpApi:
          cors: true
          path: /products/{id}
          method: get
          authorizer:
            name: httpApiRequestAuthorizer
  createProduct:
    handler: createProduct/handler.createProduct
    events:
     - httpApi:
          cors: true
          path: /products
          method: post
          authorizer:
            name: httpApiRequestAuthorizer
  catalogBatchProcess:
    handler: catalogBatchProcess/handler.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt: [catalogQueue, Arn]